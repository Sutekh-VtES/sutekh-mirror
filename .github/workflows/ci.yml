name: Sutekh CI

on: [push, pull_request]

jobs:
  postgres-linux:

    runs-on: ${{ matrix.ubuntu }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: Postgres - Python ${{ matrix.python-version }}, Ubuntu ${{ matrix.ubuntu }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        ubuntu: ['ubuntu-18.04', 'ubuntu-20.04']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install APT Dependencies
      run: |
        sudo apt-get -y -q update
        sudo apt-get -y -q install gir1.2-gtk-3.0 python3-gi librsvg2-common libgirepository1.0-dev pkg-config libcairo2-dev xvfb
    - name: Install PIP Dependencies
      run: |
        pip install mock pytest keyring ply sqlobject configobj PyGObject pycairo psycopg2
    - name: Create Postgres DB
      env:
        PGPASSWORD: postgres
      run: |
        # We use template0 so we can set the collation order to C.UTF-8
        createdb -U postgres -h localhost -w --lc-collate=C.UTF-8 --template template0 -w sutekh_test
    - name: Run Tests
      env:
        SUTEKH_TEST_DB: postgres://postgres:postgres@localhost/sutekh_test?driver=psycopg&charset=utf-8
      run: |
        cd sutekh
        xvfb-run --auto-servernum pytest

  mysql-linux:

    runs-on: ${{ matrix.ubuntu }}

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
        # Set health checks to wait until mysql has started
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 3306:3306

    name: MySQL - Python ${{ matrix.python-version }}, Ubuntu ${{ matrix.ubuntu }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        ubuntu: ['ubuntu-18.04', 'ubuntu-20.04']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install APT Dependencies
      run: |
        sudo apt-get -y -q update
        sudo apt-get -y -q install gir1.2-gtk-3.0 python3-gi librsvg2-common libgirepository1.0-dev pkg-config libcairo2-dev xvfb
    - name: Install PIP Dependencies
      run: |
        pip install mock pytest keyring ply sqlobject configobj PyGObject pycairo mysql-connector
    - name: Create MySQL DB
      run: |
        mysql -uroot -h 127.0.0.1 -e 'create database sutekh_test;'
    - name: Run Tests
      env:
        SUTEKH_TEST_DB: mysql://root:@127.0.0.1/sutekh_test?driver=connector
      run: |
        cd sutekh
        xvfb-run --auto-servernum pytest

  sqlite-linux:

    runs-on: ${{ matrix.ubuntu }}

    name: SQLite - Python ${{ matrix.python-version }}, Ubuntu ${{ matrix.ubuntu }}
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        ubuntu: ['ubuntu-18.04', 'ubuntu-20.04']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install APT Dependencies
      run: |
        sudo apt-get -y -q update
        sudo apt-get -y -q install gir1.2-gtk-3.0 python3-gi librsvg2-common libgirepository1.0-dev pkg-config libcairo2-dev xvfb
    - name: Install PIP Dependencies
      run: |
        pip install mock pytest keyring ply sqlobject configobj PyGObject pycairo
    - name: Run Tests
      run: |
        pushd sutekh
        xvfb-run --auto-servernum pytest
        popd
    - name: Build sdist
      if: matrix.python-version == '3.9' && matrix.ubuntu == 'ubuntu-20.04'
      run: |
        pushd sutekh
        python3 ./setup.py sdist
        popd
    - name: Upload sdist
      uses: actions/upload-artifact@v2
      if: matrix.python-version == '3.9' && matrix.ubuntu == 'ubuntu-20.04'
      with:
        name: sutekh-sdist
        path: sutekh/dist/Sutekh*tar*


  sqlite-win:

    runs-on: windows-latest
    name: Windows

    steps:
    - uses: actions/checkout@v2
    - name: Setup MSYS
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-hicolor-icon-theme
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-python-gobject
          mingw-w64-x86_64-python-cx_Freeze
          mingw-w64-x86_64-poppler
    - name: Install PIP dependencies
      shell: msys2 {0}
      run: |
        pip install keyring ply sqlobject configobj pytest mock
    - name: Run tests
      shell: msys2 {0}
      run: |
        cd sutekh
        pytest
        cd ..
    - name: Build package
      shell: msys2 {0}
      run: |
        cd sutekh
        python3 setup-freeze.py build_exe
        cd ..
    - name: Install NSIS
      # Install the msys2 nsis package
      shell: msys2 {0}
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-nsis
    - name: Prepare to make installer
      shell: msys2 {0}
      run: |
        cd sutekh
        mkdir -p dist
        ./prepare_win_nsis
    - name: Make installer
      shell: msys2 {0}
      run: |
        cd sutekh
        ./sutekh-makensis sutekh-freeze.nsi
    - name: Upload NSIS installer
      uses: actions/upload-artifact@v2
      with:
        name: sutekh-cx_Freeze_windows
        path: sutekh/dist/*exe

  sqlite-macos:

    # Because we're using the github supplied version of python, we don't get
    # support for older releases unless we jump through more hoops,
    # but that's not worth doing until we fix the issues with the created installer
    # 
    # See https://github.com/actions/virtual-environments/issues/1256#issuecomment-770270252
    # for details on the hoops
    # 
    # We pin to 10.15 for now, as the oldest version supplied by github actions,
    # to at least get a bit more version coverage
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v2
    - name: Install Python
      uses: actions/setup-python@v2
    - name: Install brew dependencies
      run: |
        brew install gtk+3 gobject-introspection librsvg adwaita-icon-theme gtk-mac-integration poppler hicolor-icon-theme
    - name: Install PIP dependencies
      run: |
        pip install keyring ply sqlobject configobj pytest mock PyGObject pycairo cx_Freeze
    - name: Run tests
      run: |
        cd sutekh
        pytest
        cd ..
    - name: Build Mac packages
      run: |
        cd sutekh
        python3 setup-freeze.py bdist_mac
        # Permissions are helpful for playing with the files in the app
        chmod 755 build/Sutekh*app*/Contents/MacOS/SutekhCli* build/Sutekh*app*/Contents/MacOS/SutekhGui*
        cd ..
    - name: Tar cx_Freeze app
      # We need to do this so we can preserve permissions, as the
      # github artifact upload explicitly doesn't
      run: |
        cd sutekh/build/
        tar -cf sutekh_app.tar Sutekh*app*
    - name: Upload cx_Freeze app directory
      uses: actions/upload-artifact@v2
      with:
        name: sutekh-cx_Freeze_macos-app
        path: sutekh/build/sutekh_app.tar
    #- name: Build dmg file
      #run: |
        #cd sutekh
        #python3 setup-freeze.py bdist_dmg
        #cd ..
    #- name: Upload cx_Freeze dmg file
      #uses: actions/upload-artifact@v2
      #with:
        #name: sutekh-cx_Freeze_macos-dmg
        #path: sutekh/build/Sutekh*dmg


  sqlite-linux-checks:

    runs-on: ubuntu-latest

    name: SQLite - Pylint & Coverage
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install APT Dependencies
      run: |
        sudo apt-get -y -q update
        sudo apt-get -y -q install gir1.2-gtk-3.0 python3-gi librsvg2-common libgirepository1.0-dev pkg-config libcairo2-dev xvfb gir1.2-poppler-0.18
    - name: Install PIP Dependencies
      run: |
        pip install mock pytest keyring ply sqlobject configobj PyGObject pycairo pylint pytest-cov textile
    - name: Run Pylint
      run: |
        pushd sutekh
        xvfb-run --auto-servernum pylint --rcfile=../tools/sutekh_pylint sutekh || echo "Pylint exited with code $?"
        popd
    - name: Run Tests with coverage
      run: |
        pushd sutekh
        xvfb-run --auto-servernum pytest --cov-report term-missing:skip-covered --cov=sutekh
        popd
    - name: Check that docs are up-to-date
      run: |
        pushd sutekh/sutekh/docs
        python3 ./textile2html.py
        # This will cause a failure if the docs have changed
        git -P diff --exit-code .
        popd


  build-ubuntu-deb:

    runs-on: ubuntu-latest
    name: Build a deb package
    steps:
    - uses: actions/checkout@v2
    - name: Install APT Dependencies
      run: |
        sudo apt-get -y -q update
        sudo apt-get -y -q install gir1.2-gtk-3.0 python3-gi librsvg2-common libgirepository1.0-dev pkg-config libcairo2-dev xvfb gir1.2-poppler-0.18 python3-ply python3-keyring python3-sqlobject python3-configobj  python3-gi-cairo python3-cairo lintian debhelper python3-all python3-pytest python3-mock dh-python devscripts
    - name: pip install stdeb
      run: |
        # The packaged stdeb for ubuntu 20.04 is old and broken
        pip install --user stdeb
    - name: Create deb package
      run: |
        pushd sutekh
        export PATH="$PATH:$HOME/.local/bin"
        python3 ./setup.py sdist
        DIST=$(ls dist/Sutekh*.tar.gz)
        cp $DIST ${DIST/tar.gz/orig.tar.gz}
        ../.github/sutekh-makedeb-nosign 'Test Build <test@nowhere.test>'
        popd
    - name: Upload debian source package
      uses: actions/upload-artifact@v2
      with:
        name: sutekh_deb
        path: sutekh/deb_dist/*bionic*

  build-fc-rpm:

    runs-on: ubuntu-latest
    name: Build a RPM package
    steps:
    - uses: actions/checkout@v2
    - name: Install APT Dependencies
      run: |
        sudo apt-get -y -q update
        sudo apt-get -y -q install gir1.2-gtk-3.0 python3-gi librsvg2-common libgirepository1.0-dev pkg-config libcairo2-dev xvfb gir1.2-poppler-0.18 python3-ply python3-keyring python3-sqlobject python3-configobj  python3-gi-cairo python3-cairo python3-all python3-pytest python3-mock
    - name: Create SPEC file and tarball
      run: |
        cd sutekh
        python3 setup.py sdist
        python3 setup.py bdist_rpm --spec-only
    - name: Build RPM on FC 34
      uses: xmidt-org/rpm-package-action@v1
      with:
        path: sutekh/dist
        spec: Sutekh.spec
        output-dir: .
        dockerfile-path: .github/rpm_Dockerfiles/fedora34_Dockerfile
    - name: Upload RPM
      uses: actions/upload-artifact@v2
      with:
        name: sutekh_rpm
        path: sutekh/dist/*rpm*
